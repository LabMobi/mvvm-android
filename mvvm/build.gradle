repositories {
    google()
    mavenCentral()
}

apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    android {
        namespace 'mobi.lab.mvvm'
    }

    kotlinOptions {
        jvmTarget = "1.8"

        // For Kotlin API strict mode.
        // In the future we should be able to do it easier.
        // When https://youtrack.jetbrains.com/issue/KT-37652 is fixed
        // then we can use the module annotation to enable this instead of the compiler flag.
        freeCompilerArgs += '-Xexplicit-api=strict'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        merge '**/LICENSE.txt'
    }

    defaultConfig {
        compileSdkVersion rootProject.compileSdk
        targetSdkVersion rootProject.targetSdk
        minSdkVersion rootProject.minSdk
        version rootProject.ext.libraryVersion
    }

    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.getName().contains("release")) {
                // Don't add the variant name to release artefacts
                outputFileName = "${archivesBaseName}-${rootProject.ext.libraryVersion}.aar"
            } else {
                outputFileName = "${archivesBaseName}-${variant.name}-${rootProject.ext.libraryVersion}.aar"
            }
        }
    }

    lint {
        fatal "StopShip"
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
        }
    }
}

dependencies {
    androidTestImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test:runner:$testRunnerVersion"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
}

def GROUP_CI_BUILD_TASKS = "Build"

task buildLibDebug(dependsOn: ["build"])
buildLibDebug.group = GROUP_CI_BUILD_TASKS
buildLibDebug.description = "Build the debug version of components lib"

task buildLibRelease(dependsOn: ["buildLibDebug"])
buildLibRelease.group = GROUP_CI_BUILD_TASKS
buildLibRelease.description = "Build the release version of components lib"

task buildAndPublishRelease(dependsOn: ['buildLibRelease', 'publish'])
buildAndPublishRelease.group = GROUP_CI_BUILD_TASKS
buildAndPublishRelease.description = "Build the library release version and publish it"

publish.mustRunAfter tasks.findByPath('buildLibRelease')

Properties properties = new Properties()
try {
    properties.load(project.rootProject.file('publish.properties').newDataInputStream())
} catch (Exception ignored) {
    println "publish.properties missing"
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId = 'mobi.lab.mvvm'
                artifactId = 'mvvm'
                from components.release
                pom {
                    packaging = 'aar'
                    name = 'Mobi Lab MVVM library.'
                    description = 'Mobi Lab MVVM is a library for using the MVVM architecture in your Android application.'
                    url = 'https://github.com/LabMobi/mvvm-android'

                    licenses {
                        license {
                            name = 'The MIT License'
                            url = 'https://opensource.org/licenses/mit-license.php'
                        }
                    }
                    developers {
                        developer {
                            name = properties.getProperty("publish_developer_name")
                            name = properties.getProperty("publish_developer_name")
                            email = properties.getProperty("publish_developer_email")
                            organization = properties.getProperty("publish_developer_organization")
                            organizationUrl = properties.getProperty("publish_developer_organization_url")
                        }
                    }
                    scm {
                        connection = 'https://github.com/LabMobi/mvvm-android.git'
                        developerConnection = 'https://github.com/LabMobi/mvvm-android.git'
                        url = 'https://github.com/LabMobi/mvvm-android'
                    }
                }
            }
        }
        repositories {
            maven {
                name = "OSSRH"
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username = properties.getProperty("publish_ossrh_username")
                    password = properties.getProperty("publish_ossrh_password")
                }
            }
        }
    }

    signing {
        def signingKey = properties.getProperty("signing_key")
        def signingPassword = properties.getProperty("signing_password")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications
    }
}
